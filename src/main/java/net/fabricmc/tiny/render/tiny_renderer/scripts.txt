      /*
        List<Vector3f> positions = new ArrayList<>();
        List<Vector3f> normals = new ArrayList<>();
        List<Vec2f> texCoords = new ArrayList<>();
        StringBuilder builder = new StringBuilder();
        StringBuilder mtl = new StringBuilder();
        FloatBuffer vertices = mesh.vertices();
        while (vertices.hasRemaining())
        {
            positions.add(new Vector3f(vertices.get(), vertices.get(), vertices.get()));
            normals.add(new Vector3f(vertices.get(), vertices.get(), vertices.get()));
            texCoords.add(new Vec2f(vertices.get(), vertices.get()));
        }
        builder.append("usemtl meshen.mtl\n");
        builder.append("o mc_chunk\n");
        for (Vector3f pos : positions)
            builder.append("v ").append(String.format(Locale.US, "%.9f %.9f %.9f", pos.getX(), pos.getY(), pos.getZ())).append("\n");
        for (Vec2f tex : texCoords)
            builder.append("vt ").append(String.format(Locale.US, "%.9f %.9f", tex.x, tex.y)).append("\n");
        for (Vector3f nor : normals)
            builder.append("vn ").append(String.format(Locale.US, "%.9f %.9f %.9f", nor.getX(), nor.getY(), nor.getZ())).append("\n");

        builder.append("s off").append("\n");
        while (mesh.indices().hasRemaining())
        {
            builder.append("f ");
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                    builder.append(mesh.indices().get() + 1).append(j < 2 ? "/" : "");
                if (i < 2)
                    builder.append(" ");
                else
                    builder.append("\n");
            }
        }
        mtl.append(
                "newmtl men_va_e_de\n" +
                "Ns 225.000000\n" +
                "Ka 1.000000 1.000000 1.000000\n" +
                "Kd 0.000000 0.800000 0.015708\n" +
                "Ks 0.500000 0.500000 0.500000\n" +
                "Ke 0.000000 0.000000 0.000000\n" +
                "Ni 1.450000\n" +
                "d 1.000000\n" +
                "illum 2\n");
        String texPath = new File("atlas.png").getAbsolutePath();
        SpriteAtlasTexture atlasTexture = mesh.materials().get(0).texture().getAtlas();
        ISpriteAtlasTexture$Data atlasData = (ISpriteAtlasTexture$Data) ((ISpriteAtlasTexture) atlasTexture).getData();
        ByteBuffer texBuffer = BufferUtils.createByteBuffer(atlasData.getWidth() * atlasData.getHeight() * 4);
        glBindTexture(GL_TEXTURE_2D, atlasTexture.getGlId());
        glGetTexImage(GL_TEXTURE_2D, 0, GL_RGBA, GL_UNSIGNED_BYTE, texBuffer);
        IntBuffer intBuffer = texBuffer.asIntBuffer();

        BufferedImage image = new BufferedImage(atlasData.getWidth(), atlasData.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for (int y = 0; y < image.getHeight(); y++)
        {
            for (int x = 0; x < image.getWidth(); x++)
                image.setRGB(x, y, intBuffer.get());
        }
        try {
            ImageIO.write(image, "PNG", new File(texPath));
        }catch (IOException e) {
            e.printStackTrace();
        }

        mtl.append("map_Kd ").append(texPath).append("\n");
        FileUtils.write("meshen.obj", builder.toString().getBytes());
        FileUtils.write("meshen.mtl", mtl.toString().getBytes());
        mesh.vertices().flip();
        mesh.indices().flip();
        */